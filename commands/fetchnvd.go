package commands

import (
	"github.com/spf13/cobra"
	"github.com/spf13/viper"
	"github.com/vulsio/go-cve-dictionary/db"
	log "github.com/vulsio/go-cve-dictionary/log"
	"github.com/vulsio/go-cve-dictionary/models"
	"golang.org/x/xerrors"
)

var fetchNvdCmd = &cobra.Command{
	Use:   "nvd",
	Short: "Fetch Vulnerability dictionary from NVD",
	Long:  "Fetch Vulnerability dictionary from NVD",
	RunE:  fetchNvd,
}

func init() {
	fetchCmd.AddCommand(fetchNvdCmd)

	fetchNvdCmd.PersistentFlags().Bool("full", false, "Collect large amounts of CPE relate data")
	_ = viper.BindPFlag("full", fetchNvdCmd.PersistentFlags().Lookup("full"))
}

func fetchNvd(cmd *cobra.Command, args []string) (err error) {
	if err := log.SetLogger(viper.GetBool("log-to-file"), viper.GetString("log-dir"), viper.GetBool("debug"), viper.GetBool("log-json")); err != nil {
		return xerrors.Errorf("Failed to SetLogger. err: %w", err)
	}

	driver, locked, err := db.NewDB(viper.GetString("dbtype"), viper.GetString("dbpath"), viper.GetBool("debug-sql"), db.Option{})
	if err != nil {
		if locked {
			log.Errorf("Failed to initialize DB. Close DB connection before fetching. err: %s", err)
		}
		return err
	}

	fetchMeta, err := driver.GetFetchMeta()
	if err != nil {
		log.Errorf("Failed to get FetchMeta from DB. err: %s", err)
		return err
	}
	if fetchMeta.OutDated() {
		log.Errorf("Failed to Insert CVEs into DB. SchemaVersion is old. SchemaVersion: %v", map[string]uint{"latest": models.LatestSchemaVersion, "DB": fetchMeta.SchemaVersion})
		return xerrors.New("Failed to Insert CVEs into DB. SchemaVersion is old")
	}

	if err := driver.UpsertFetchMeta(fetchMeta); err != nil {
		log.Errorf("Failed to upsert FetchMeta to DB. err: %s", err)
		return err
	}

	log.Infof("Inserting NVD into DB (%s).", driver.Name())
	if err := driver.InsertNvd(); err != nil {
		log.Errorf("Failed to insert. dbpath: %s, err: %s", viper.GetString("dbpath"), err)
		return err
	}

	log.Infof("Finished fetching NVD.")
	return nil
}
